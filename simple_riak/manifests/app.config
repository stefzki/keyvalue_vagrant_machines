%% -*- mode: erlang;erlang-indent-level: 4;indent-tabs-mode: nil -*-
%% ex: ft=erlang ts=4 sw=4 et
[
 %% Riak Client APIs config
 {riak_api, [
            %% {pb_backlog, 64},
            {pb_ip,   "0.0.0.0" },
            {pb_port, 8087 }
            ]},

 %% Riak Core config
 {riak_core, [
              {ring_state_dir, "/var/lib/riak/ring"},
              %{ring_creation_size, 64},
              {http, [ {"0.0.0.0", 8098 } ]},

              %{https, [{ "0.0.0.0", 8098 }]},
              %{ssl, [
              %       {certfile, "/etc/riak/cert.pem"},
              %       {keyfile, "/etc/riak/key.pem"}
              %      ]},

              {handoff_port, 8099 },
              %{handoff_ssl_options, [{certfile, "/tmp/erlserver.pem"}]},

              {dtrace_support, false},

              {platform_bin_dir, "/usr/sbin"},
              {platform_data_dir, "/var/lib/riak"},
              {platform_etc_dir, "/etc/riak"},
              {platform_lib_dir, "/usr/lib/riak/lib"},
              {platform_log_dir, "/var/log/riak"}
             ]},

 %% Riak KV config
 {riak_kv, [
            %% Storage_backend specifies the Erlang module defining the storage
            %% mechanism that will be used on this node.
            {storage_backend, riak_kv_bitcask_backend}, 
	    %%{storage_backend, riak_kv_eleveldb_backend},

            %{raw_name, "riak"},
            {mapred_name, "mapred"},
            {mapred_system, pipe},
            {mapred_2i_pipe, true},
            %% {mapred_queue_dir, "/var/lib/riak/mr_queue" },
            {map_js_vm_count, 8 },
            {reduce_js_vm_count, 6 },
            {hook_js_vm_count, 2 },
            %% {mapper_batch_size, 5},
            {js_max_vm_mem, 8},
            {js_thread_stack, 16},
            %% {map_cache_size, 10000},
            %{js_source_dir, "/tmp/js_source"},

            {http_url_encoding, on},
            {vnode_vclocks, true},
            {legacy_keylisting, false},
            {listkeys_backpressure, true}
           ]},

 %% Riak Search Config
 {riak_search, [
                {enabled, false}
               ]},

 %% Merge Index Config
 {merge_index, [
                {data_root, "/var/lib/riak/merge_index"},

                {buffer_rollover_size, 1048576},

                {max_compact_segments, 20}
               ]},

 %% Bitcask Config
 {bitcask, [
             {data_root, "/var/lib/riak/bitcask"}
           ]},

 %% eLevelDB Config
 {eleveldb, [
             {data_root, "/var/lib/riak/leveldb"}
            ]},

 %% Lager Config
 {lager, [
            {handlers, [
                {lager_console_backend, info},
                {lager_file_backend, [
                    {"/var/log/riak/error.log", error, 10485760, "$D0", 5},
                    {"/var/log/riak/console.log", info, 10485760, "$D0", 5}
                ]}
            ]},
            {crash_log, "/var/log/riak/crash.log"},
            {crash_log_msg_size, 65536},
            {crash_log_size, 10485760},
            {crash_log_date, "$D0"},
            {crash_log_count, 5},
            {error_logger_redirect, true}
        ]},

 %% riak_sysmon config
 {riak_sysmon, [
         {process_limit, 30},
         {port_limit, 2},
         {gc_ms_limit, 100},
         {heap_word_limit, 40111000},
         {busy_port, true},
         {busy_dist_port, true}
        ]},

 %% SASL config
 {sasl, [
         {sasl_error_logger, false}
        ]},

 %% riak_control config
 {riak_control, [
                {enabled, false},
                {auth, userlist},
                {userlist, [{"user", "pass"}
                           ]},

                %% The admin panel is broken up into multiple
                %% components, each of which is enabled or disabled
                %% by one of these settings.
                {admin, true}
                ]}
].

